import { generateCardsAction } from "actions/deck";
import { ReactComponent as InfoIcon } from "assets/icons/info.svg";
import Button from "components/Button";
import CardListItem from "components/CardListItem";
import Error from "components/Error";
import Header from "components/Header";
import TextArea from "components/Input/TextArea";
import Layout from "components/Layout";
import ListContainer from "components/ListContainer";
import Loader from "components/Loader";
import SimpleButton from "components/SimpleButton";
import Spacer from "components/Spacer";
import Text from "components/Text";
import useAction from "hooks/useAction";
import { useState } from "react";
import { useRef } from "react";
import { Link, Navigate } from "react-router-dom";
import { useNavigate, useParams } from "react-router-dom";
import { useGlobalState } from "store/store";
import colors from "styles/colors";
import { DeckI } from "types/deck";
import { NoteI } from "types/note";

import style from "./style.module.scss";

const Hint = () => (
	<Text color="lightgrey" className={style.hint}>
		<InfoIcon fill={colors.lightgray} />
		The cards are generated by our&nbsp;
		<Link target="_blank" rel="noopener noreferrer" to="/how">
			AI system
		</Link>
	</Text>
);

const CardList = ({
	cards,
	color,
}: {
	cards: { question: string; answer: string }[];
	color: string;
}) => {
	return (
		<Layout width="desktop" className={style.layout}>
			<ListContainer>
				{cards.map((card, idx) => (
					<CardListItem
						key={idx}
						question={card.question}
						answer={card.answer}
						id={`${idx}`}
						color={color}
					/>
				))}
			</ListContainer>
		</Layout>
	);
};

const GenerateCards = () => {
	const { deckID } = useParams();
	if (!deckID) return <Navigate to="404" />;

	const [note, setNote] = useState("");
	const [error, setError] = useState("");

	const [decks] = useGlobalState<DeckI[]>("decks");
	const [notes] = useGlobalState<Record<string, NoteI>>("notes");
	const exiNote = notes[deckID];

	const deck = decks.find(d => d.id === deckID);

	const isDesktop = window.innerWidth >= 768;
	const [pasteOverlayOpen, setPasteOverlayOpen] = useState(isDesktop);
	const navigate = useNavigate();
	const textAreaRef = useRef<HTMLTextAreaElement>(null);

	const [loading, , generateCardsCall] = useAction("notes", generateCardsAction);

	const handleSubmit = async (e: React.MouseEvent<HTMLElement>) => {
		e.preventDefault();

		if (!note.length) {
			setError("Please enter a text");
			return;
		}

		try {
			await generateCardsCall(deckID, note);
		} catch (_) {
			setError("Something went wrong");
		}
	};

	const handlePaste = async (e: React.MouseEvent<HTMLElement>) => {
		e.preventDefault();
		if (e.nativeEvent.button === 0) {
			setPasteOverlayOpen(false);
			if (textAreaRef.current) {
				textAreaRef.current.focus();
			}

			return;
		}

		const text = await navigator.clipboard.readText();
		setNote(text);
		setPasteOverlayOpen(false);
	};

	const handleFocusLost = () => {
		if (!note) setPasteOverlayOpen(true);
	};

	if (loading) return <Loader size="large" />;
	if (exiNote) return <CardList cards={exiNote.cards} color="#FFEC87" />;

	return (
		<Layout width="desktop" className={style.layout}>
			<Text className={style.align_left}>{deck?.name}</Text>
			<Header className={style.align_left} kind="h1">
				Generate Cards
			</Header>
			<div className={style.textarea_container}>
				{pasteOverlayOpen && (
					<div
						onClick={handlePaste}
						onContextMenu={handlePaste}
						className={style.overlay}
					>
						<Header color="black" kind="h2">
							Right-click to paste your text
						</Header>
						<Spacer spacing={1} />
						<Text color="lightgrey">We will generate cards out of the text</Text>
					</div>
				)}
				<TextArea
					onBlur={handleFocusLost}
					ref={textAreaRef}
					height="100%"
					label="text to generate cards from"
					value={note}
					error={error}
					maxLength={1000}
					onChange={e => setNote(e.target.value)}
				/>
			</div>
			<Spacer spacing={6} />
			{error && <Error>{error}</Error>}
			<Hint />
			<Spacer spacing={2} />
			<Button onClick={handleSubmit}>Generate Cards</Button>
			<SimpleButton action={() => navigate(-1)}>Cancel</SimpleButton>
		</Layout>
	);
};

export default GenerateCards;
