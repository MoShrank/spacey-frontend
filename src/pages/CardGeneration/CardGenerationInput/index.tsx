import { ReactComponent as InfoIcon } from "assets/icons/info.svg";
import Button from "components/Button";
import ContentWidthConstraint from "components/ContentWidthConstraint";
import Error from "components/Error";
import Header from "components/Header";
import TextArea from "components/Input/TextArea";
import SimpleButton from "components/SimpleButton";
import Spacer from "components/Spacer";
import Text from "components/Text";
import { useRef, useState } from "react";
import { Link } from "react-router-dom";
import colors from "styles/colors";

import style from "./style.module.scss";

const Hint = () => (
	<Text color="lightgrey" className={style.hint}>
		<InfoIcon fill={colors.lightgray} />
		The cards are generated by our&nbsp;
		<Link target="_blank" rel="noopener noreferrer" to="/ai">
			AI system
		</Link>
	</Text>
);

interface CardGenerationInputI {
	onClose: (event: React.MouseEvent<HTMLElement>) => void;
	setNote: (note: string) => void;
	note: string;
	error: string;
	onSubmit: (e: React.MouseEvent<HTMLElement>) => void;
}

const CardGenerationInput = ({
	onClose,
	onSubmit,
	note,
	setNote,
	error,
}: CardGenerationInputI) => {
	const isDesktop = window.innerWidth >= 768;
	const textAreaRef = useRef<HTMLTextAreaElement>(null);
	const [pasteOverlayOpen, setPasteOverlayOpen] = useState(isDesktop);

	const handleFocusLost = () => {
		if (!note && isDesktop) setPasteOverlayOpen(true);
	};

	const handlePaste = async (e: React.MouseEvent<HTMLElement>) => {
		e.preventDefault();
		if (e.nativeEvent.button === 0) {
			setPasteOverlayOpen(false);
			if (textAreaRef.current) {
				textAreaRef.current.focus();
			}

			return;
		}

		const text = await navigator.clipboard.readText();
		setPasteOverlayOpen(false);

		setNote(text);
	};

	return (
		<>
			<div className={style.textarea_container}>
				{pasteOverlayOpen && (
					<div
						onClick={handlePaste}
						onContextMenu={handlePaste}
						className={style.overlay}
					>
						<Header color="black" kind="h2">
							Right-click to paste your text
						</Header>
						<Spacer spacing={1} />
						<Text color="lightgrey">We will generate cards out of the text</Text>
					</div>
				)}
				<TextArea
					onBlur={handleFocusLost}
					ref={textAreaRef}
					height="100%"
					label="text to generate cards from"
					value={note}
					error={error}
					maxLength={1000}
					onChange={e => setNote(e.target.value)}
				/>
			</div>
			<Spacer spacing={6} />
			{error && <Error>{error}</Error>}
			<ContentWidthConstraint>
				<Hint />
				<Spacer spacing={2} />
				<Button onClick={onSubmit}>Generate Cards</Button>
				<SimpleButton as="button" onClick={onClose}>
					Cancel
				</SimpleButton>
			</ContentWidthConstraint>
		</>
	);
};

export default CardGenerationInput;
